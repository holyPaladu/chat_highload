version: "3.8"

networks:
  chat-networks:
    driver: bridge

services:
  postgres-db:
    image: postgres:15
    restart: always
    container_name: chat_postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chatdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chat-networks

  redis:
    image: redis:latest
    container_name: chat_redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat-networks

  kafka:
    image: docker.io/bitnami/kafka:3.9
    container_name: kafka_chat
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - chat-networks

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "5000:3000"
    env_file:
      - ./auth/.env
    depends_on:
      - postgres-db
      - kafka
      - redis
    networks:
      - chat-networks
    command: node dist/main
    restart: always

  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    ports:
      - "5001:3001"
    env_file:
      - ./notification/.env
    depends_on:
      - postgres-db
      - kafka
      - redis
    networks:
      - chat-networks
    command: node dist/main
    restart: always

volumes:
  pgdata:
  kafka_data:
  redis_data:
    driver: local
